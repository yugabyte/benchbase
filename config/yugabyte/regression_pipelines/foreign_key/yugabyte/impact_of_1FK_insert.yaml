type: YUGABYTE
driver: com.yugabyte.Driver
url: jdbc:yugabytedb://{{endpoint}}:5433/yugabyte?sslmode=require&ApplicationName=featurebench&reWriteBatchedInserts=true
username: {{username}}
password: {{password}}

batchsize: 128
isolation: TRANSACTION_REPEATABLE_READ
loaderThreads: 1
terminals: 1
collect_pg_stat_statements: true
use_dist_in_explain : true
analyze_on_all_tables: true
yaml_version: v1.0
works:
    work:
        time_secs: 300
        active_terminals: 1
        rate: unlimited
        warmup: 60
microbenchmark:
    class: com.oltpbenchmark.benchmarks.featurebench.customworkload.YBDefaultMicroBenchmark
    properties:
        setAutoCommit: false
        create:
            - DROP TABLE IF EXISTS employees_with_1fk;

            - DROP TABLE IF EXISTS projects_with_1_fk;

            - create table projects_with_1_fk(id int primary key, uid int unique, name varchar(20) not null, start_date date not null, end_date date, budget decimal(10,2));

            - create table employees_with_1fk(id int primary key,name varchar(20) not null, email varchar(100) not null, phone varchar(15), position varchar(10), salary decimal(10,2), project_id1 int not null, project_id2 int not null);

        cleanup:
            - DROP TABLE IF EXISTS employees_with_1fk;

            - DROP TABLE IF EXISTS projects_with_1_fk;

        loadRules:
            - table: projects_with_1_fk
              rows: 100000
              columns:
                  - name: id
                    util: PrimaryIntGen
                    params: [1, 100000]
                  - name: uid
                    util: PrimaryIntGen
                    params: [1, 100000]
                  - name: name
                    util: RandomAString
                    params: [1, 20]
                  - name: start_date
                    util: RandomDateBtwYears
                    params: [2000, 2025]
                  - name: end_date
                    util: RandomDateBtwYears
                    params: [2000, 2025]
                  - name: budget
                    util: RandomNoWithDecimalPoints
                    params: [1, 1000000, 2]
              
            - table: employees_with_1fk
              rows: 1000000
              columns:
                  - name: id
                    util: PrimaryIntGen
                    params: [1, 1000000]
                  - name: name
                    util: RandomAString
                    params: [1, 20]
                  - name: email
                    util: RandomAString
                    params: [1, 100]
                  - name: phone
                    util: RandomNstring
                    params: [10, 15]
                  - name: position
                    util: RandomAString
                    params: [1, 10]
                  - name: salary
                    util: RandomNoWithDecimalPoints
                    params: [1, 1000000, 2]
                  - name: project_id1
                    util: RandomInt
                    params: [1,100000]
                  - name: project_id2
                    util: RandomInt
                    params: [1,100000]

        afterLoad:
            - ALTER TABLE employees_with_1fk add CONSTRAINT fk_project FOREIGN KEY (project_id1) REFERENCES projects_with_1_fk(id);
            
        executeRules:

            - workload: FK_1_1fk_insert
              run:
                  - name: FK_1_1fk_insert
                    weight: 100
                    queries:
                        - query: insert into employees_with_1fk values(?,?,?,?,?,?,?,?);
                          bindings:
                              - util: PrimaryIntGen
                                params: [1000001, 9000000]
                              - util: RandomAString
                                params: [1, 20]
                              - util: RandomAString
                                params: [1, 100]
                              - util: RandomNstring
                                params: [10, 15]
                              - util: RandomAString
                                params: [1, 10]
                              - util: RandomNoWithDecimalPoints
                                params: [1, 1000000, 2]
                              - util: RandomInt
                                params: [1,100000]
                              - util: RandomInt
                                params: [1,100000]