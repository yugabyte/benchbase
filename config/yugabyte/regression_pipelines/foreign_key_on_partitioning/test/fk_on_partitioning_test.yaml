type: YUGABYTE
driver: com.yugabyte.Driver
url: jdbc:postgresql://127.0.0.1:5433/yugabyte?user=yugabyte&password=yugabyte

batchsize: 128
isolation: TRANSACTION_REPEATABLE_READ
loaderThreads: 1
terminals: 1
collect_pg_stat_statements: true
use_dist_in_explain : true
yaml_version: v1.0
works:
    work:
        time_secs: 60
        active_terminals: 1
        rate: unlimited
        warmup: 30
microbenchmark:
    class: com.oltpbenchmark.benchmarks.featurebench.customworkload.YBDefaultMicroBenchmark
    properties:
        setAutoCommit: false
        create:
            - DROP TABLE IF EXISTS orders_with_part;
            - DROP TABLE IF EXISTS orders_without_part;
            - DROP TABLE IF EXISTS users_with_part;
            - DROP TABLE IF EXISTS users_without_part;

            - DROP TABLE IF EXISTS users1;
            - DROP TABLE IF EXISTS users2;
            - DROP TABLE IF EXISTS users3;
            - DROP TABLE IF EXISTS users4;
            - DROP TABLE IF EXISTS users_default;

            - create table users_with_part (id int, name varchar(20) NOT NULL,phone varchar(15) NOT NULL,created_at int,PRIMARY KEY (id)) PARTITION BY RANGE (id);
            - CREATE TABLE users1 PARTITION OF users_with_part FOR VALUES FROM (1) TO (25000);
            - CREATE TABLE users2 PARTITION OF users_with_part FOR VALUES FROM (25000) TO (50000);
            - CREATE TABLE users3 PARTITION OF users_with_part FOR VALUES FROM (50000) TO (75000);
            - CREATE TABLE users4 PARTITION OF users_with_part FOR VALUES FROM (75000) TO (100000);
            - CREATE TABLE users_default PARTITION OF users_with_part default;

            - create table users_without_part (id int, name varchar(20) NOT NULL,phone varchar(15) NOT NULL,created_at int,PRIMARY KEY (id));

            - CREATE TABLE orders_with_part (id int PRIMARY KEY,user_id int,order_date DATE NOT NULL,amount DECIMAL(10,2) NOT NULL);
            - CREATE TABLE orders_without_part (id int PRIMARY KEY,user_id int,order_date DATE NOT NULL,amount DECIMAL(10,2) NOT NULL);

            - create index user_id_index_with_part on orders_with_part(user_id);
            - create index user_id_index_without_part on orders_without_part(user_id);
        cleanup:
            - DROP TABLE IF EXISTS orders_with_part;
            - DROP TABLE IF EXISTS orders_without_part;
            - DROP TABLE IF EXISTS users_with_part;
            - DROP TABLE IF EXISTS users_without_part;

            - DROP TABLE IF EXISTS users1;
            - DROP TABLE IF EXISTS users2;
            - DROP TABLE IF EXISTS users3;
            - DROP TABLE IF EXISTS users4;
            - DROP TABLE IF EXISTS users_default;
        loadRules:
            - table: users_with_part
              rows: 100000
              columns:
                  - name: id
                    util: PrimaryIntGen
                    params: [1, 100000]
                  - name: name
                    util: RandomAString
                    params: [1, 20]
                  - name: phone
                    util: RandomNstring
                    params: [10, 15]
                  - name: created_at
                    util: PrimaryIntGen
                    params: [1,100000]

            - table: users_without_part
              rows: 100000
              columns:
                  - name: id
                    util: PrimaryIntGen
                    params: [1, 100000]
                  - name: name
                    util: RandomAString
                    params: [1, 20]
                  - name: phone
                    util: RandomNstring
                    params: [10, 15]
                  - name: created_at
                    util: PrimaryIntGen
                    params: [1,100000]

            - table: orders_with_part
              rows: 1000000
              columns:
                  - name: id
                    util: PrimaryIntGen
                    params: [1, 1000000]
                  - name: user_id
                    util: CyclicSeqIntGen
                    params: [1,100000]
                  - name: order_date
                    util: RandomDateBtwYears
                    params: [2020, 2023]
                  - name: amount
                    util: RandomNoWithDecimalPoints
                    params: [1, 1000000, 2]

            - table: orders_without_part
              rows: 1000000
              columns:
                  - name: id
                    util: PrimaryIntGen
                    params: [1, 1000000]
                  - name: user_id
                    util: CyclicSeqIntGen
                    params: [1,100000]
                  - name: order_date
                    util: RandomDateBtwYears
                    params: [2020, 2023]
                  - name: amount
                    util: RandomNoWithDecimalPoints
                    params: [1, 1000000, 2]

        afterLoad:
            - alter table orders_with_part add constraint fk foreign key(user_id) references users_with_part(id) on update cascade on delete cascade;
            - alter table orders_without_part add constraint fk foreign key(user_id) references users_without_part(id) on update cascade on delete cascade;

        executeRules:
            
            - workload: update_with_part
              run:
                  - name: update_with_part
                    weight: 100
                    queries:
                        - query: update users_with_part set id=id+100000 where id=?;
                          bindings:
                            - util: PrimaryIntGen
                              params: [1, 100000]

            - workload: delete_with_part
              run:
                  - name: delete_with_part
                    weight: 100
                    queries:
                        - query: delete from users_with_part where id=?;
                          bindings:
                            - util: PrimaryIntGen
                              params: [1, 100000]

            - workload: update_without_part
              run:
                  - name: update_without_part
                    weight: 100
                    queries:
                        - query: update users_without_part set id=id+100000 where id=?;
                          bindings:
                            - util: PrimaryIntGen
                              params: [1, 100000]

            - workload: delete_without_part
              run:
                  - name: delete_without_part
                    weight: 100
                    queries:
                        - query: delete from users_without_part where id=?;
                          bindings:
                            - util: PrimaryIntGen
                              params: [1, 100000]